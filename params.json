{"name":"CanvasBag","tagline":"Open source canvas oriented library to easy render complex graphics in your web applications.","body":"### Welcome to CanvasBag Pages.\r\nCanvasBag graphic library written in TypeScript is your way to create application easy and quickly. It provides toolkit of basic shapes like circle, rectangle, triangle or custom shapes defined by points in array. You can compose more complex object with containers. **It's in your hands!**\r\n\r\nCanvasBag is still under development. Some function doesn't have to work correctly. If you have any idea how to improve it, please contact me on GitHub.\r\n\r\n### RENDER\r\nRender is the core part of the library. The purpose of `render` is to render the `scene` object to your `canvas`. First thing you have to do is define canvas in your html page and import CanvasBag library. Example below using jade.\r\n```jade     \r\n     html\r\n         head\r\n             script(type=\"text/javascript\", src=\"../bundle.js\")\r\n             script(type=\"text/javascript\", src=\"connectionBasic.js\")\r\n         body\r\n             canvas(id=\"connectionBasic1\", width=\"1000\", height=\"800\", style=\"float:left;\")\r\n             script(type='text/javascript').\r\n                  window.onload = renderSample();\r\n```\r\n \r\nThe only thing to connect `canvas` with `render` is the next part of code:\r\n```javascript\r\n     var canvas = document.getElementById(\"connectionBasic1\");\r\n     var render = new CanvasBag.Render();\r\n     render.setCanvas(canvas);\r\n```\r\n**That's all**. Now you can add `scene`, `container`, `shapes` and other things to `render`. All objects inside render will be automatically rendered as soon as possible.\r\n \r\n**Available `RENDER` methods**\r\n*  `setRenderingInterval(interval:number)` - Define how ofteren `render` re-render the canvas\r\n*  `setCanvas(canvas)` - Connect `render` with `canvas` on the page\r\n*  `addScene(scene: CanvasBag.Scene)` - The main scene of render. Only one scene per canvas can be defined. \r\n*  `render()` - Trigger manually render of `canvas` (re-rendered only if scene is invalidated)\r\n\r\n### SCENE\r\nScene hold all others objects. All rendered objects in `canvas`. In present only **one** `scene` is permitted per `render` and `canvas`. \r\nCode below present, how you can create simple scene and add it to render. \r\n\r\n```javascript\r\n    var scene = new CanvasBag.Scene.Basic();\r\n    render.addScene(scene);\r\n```\r\nNothing more is necessary to add `scene` to `canvas`. Now it is important to introduce methods of `SCENE` object.\r\n\r\n**Available `SCENE` methods**\r\n*  `addShape(shape: BasicShapePrototype)` - Add all objects that extends BasicShapePrototype. Currently `circle`, `rectangle`, `triangle`, `custom shape`.\r\n*  `addContainer(container: BasicContainerPrototype)`\r\n*  `addSprite(sprite: BasicSpritePrototype)` - Add `image` or `text` directly to scene.\r\n*  `addConnection(connection: BasicConnectionPrototype)`\r\n*  `removeConnectionById(connectionId: string)`\r\n*  `getNodeById(nodeId: string):CanvasBag.Node` - Every object of scene has automatically generated UUID. You can select any object in scene throught this ID and change its properties. All nodes in scene are accessible throught `Node` interface.\r\n*  `getConnectionById(connectionId: string):BasicConnectionPrototype` - Same behaviour like getNodeById method, but for connections.\r\n*  `getAllConnections():Array<BasicConnectionPrototype>`\r\n*  `getAllSprites():Array<BasicSpritePrototype>`\r\n*  `toJSON():string` - It is possible to convert whole scene to JSON object.\r\n*  `fromJSON(object: string) - It is possible to load definition of scene and of all nodes throught json.\r\n*  `invalidateScene()` - Cause re-render canvas as soon as possible.\r\n\r\n### CONTAINERS\r\nWill be described soon.\r\n\r\n### SHAPES\r\nWill be described soon.\r\n\r\n### SPRITES\r\nWill be described soon.\r\n\r\n### CONNECTIONS\r\nWill be described soon.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}